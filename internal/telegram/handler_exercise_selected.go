package telegram

import (
	"context"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"strconv"
	"strings"
)

func (h *Handler) HandleExerciseSelected(chatID int64, exerciseID int) {

	records, err := h.recordSVC.GetRecords(context.Background(), chatID, exerciseID, 5)
	if err != nil {
		h.HandleSendMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", nil)
		return
	}

	// –¢—É—Ç –ø–æ–ª—É—á–∞–µ–º –∞–Ω–≥–ª. –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü –ø–æ ID
	muscleNameEng, err := h.exerciseSVC.GetExerciseByID(context.Background(), exerciseID)
	if err != nil {
		h.HandleSendMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –º—ã—à—Ü", nil)
		return
	}

	// –¢—É—Ç muscleGroupName –∏–∑ –∞–Ω–≥–ª. –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∫–∏–¥—ã–≤–∞–µ—Ç —Ä—É—Å—Å–∫–æ–µ
	msg := fmt.Sprintf("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: %s\n---\n\n", muscleGroupName(muscleNameEng.Name))

	if len(records) == 0 {
		msg += "–£–ø—Å! –¢—ã –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–ª\n"
	} else {
		msg += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n"

		for _, r := range records {
			msg += r.FormatLastMsg()
		}
	}

	exercise, err := h.exerciseSVC.GetExerciseByID(context.Background(), exerciseID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é: %v", err)
		return
	}

	msg += exercise.FormatMsgHasWeight()

	h.tempInput[chatID] = exerciseID
	msgID := h.HandleSendMessage(chatID, msg, nil)
	h.lastMsgID[chatID] = msgID

}

func (h *Handler) HandleTrainingMessage(msg *tgbotapi.Message) {

	chatID := msg.Chat.ID
	text := msg.Text
	messageID := msg.MessageID

	if lastMsgID, ok := h.lastMsgID[chatID]; ok {
		h.HandleDeleteMessage(chatID, lastMsgID)
		delete(h.lastMsgID, chatID)
	}

	exerciseID, ok := h.tempInput[chatID]
	if !ok {
		h.HandleSendMessage(chatID, "–í—ã –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª–∏. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É /Start", nil)
		return
	}

	exercise, err := h.exerciseSVC.GetExerciseByID(context.Background(), exerciseID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é: %v", err)
		return
	}

	if exercise == nil {
		log.Printf("–ù–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...: %v", err)
		return
	}

	var weight *float64
	var reps int

	parts := strings.Fields(text)

	if exercise.HasWeight {
		if len(parts) != 2 {
			h.HandleDeleteMessage(chatID, messageID)
			badMsg := fmt.Sprintf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.\n\n–í—ã –≤–≤–µ–ª–∏: \"%s\"\n\n–í–≤–µ–¥–∏—Ç–µ: –≤–µ—Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è\n–ù–∞–ø—Ä–∏–º–µ—Ä: 100 5", text)
			mmm := h.HandleSendMessage(chatID, badMsg, nil)
			h.lastMsgID[chatID] = mmm
			return
		}

		w, err1 := strconv.ParseFloat(parts[0], 64)
		r, err2 := strconv.Atoi(parts[1])
		if err1 != nil || err2 != nil {
			h.HandleDeleteMessage(chatID, messageID)
			badMsg := fmt.Sprintf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.\n\n–í—ã –≤–≤–µ–ª–∏: \"%s\"\n\n–í–≤–µ–¥–∏—Ç–µ: –≤–µ—Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è\n–ù–∞–ø—Ä–∏–º–µ—Ä: 100 5", text)
			mmm := h.HandleSendMessage(chatID, badMsg, nil)
			h.lastMsgID[chatID] = mmm
			return
		}
		weight = &w
		reps = r
	} else {
		if len(parts) != 1 {
			h.HandleDeleteMessage(chatID, messageID)
			badMsg := fmt.Sprintf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.\n\n–í—ã –≤–≤–µ–ª–∏: \"%s\"\n\n–í–≤–µ–¥–∏—Ç–µ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n–ù–∞–ø—Ä–∏–º–µ—Ä: 15", text)
			mmm := h.HandleSendMessage(chatID, badMsg, nil)
			h.lastMsgID[chatID] = mmm
			return
		}

		r, err3 := strconv.Atoi(parts[0])
		if err3 != nil {
			h.HandleDeleteMessage(chatID, messageID)
			badMsg := fmt.Sprintf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.\n\n–í—ã –≤–≤–µ–ª–∏: \"%s\"\n\n–í–≤–µ–¥–∏—Ç–µ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n–ù–∞–ø—Ä–∏–º–µ—Ä: 15", text)
			mmm := h.HandleSendMessage(chatID, badMsg, nil)
			h.lastMsgID[chatID] = mmm
			return
		}
		reps = r
	}

	err = h.recordSVC.AddRecord(context.Background(), chatID, exerciseID, weight, reps)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: %v", err)
		h.HandleSendMessage(chatID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", nil)
		return
	}

	h.HandleDeleteMessage(chatID, messageID)

	delete(h.tempInput, chatID)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–°–ª–µ–¥—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", "training"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", "start"),
		),
	)

	if exercise.HasWeight {
		h.HandleSendMessage(chatID, fmt.Sprintf(
			"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n%s:\n%.1f –∫–≥. √ó %d —Ä–∞–∑\n\n---\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ? üëá", exercise.Name, *weight, reps), keyboard)
	} else {
		h.HandleSendMessage(chatID, fmt.Sprintf(
			"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n%s:\n%d —Ä–∞–∑\n\n---\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ? üëá", exercise.Name, reps), keyboard)
	}
}
